#prims
import sys

# Define the graph as an adjacency matrix
V = 5  # Number of vertices
graph = [
    [0, 4, 8, 0, 0],
    [4, 0, 3, 8, 0],
    [8, 3, 0, 7, 1],
    [0, 8, 7, 0, 2],
    [0, 0, 1, 2, 0]
]

# Function to find the vertex with minimum key value
def min_key(key, mst_set):
    min_val = sys.maxsize
    min_index = -1

    for v in range(V):
        if key[v] < min_val and not mst_set[v]:
            min_val = key[v]
            min_index = v

    return min_index

# Function to perform Prim's algorithm to find MST
def prim_mst():
    parent = [-1] * V
    key = [sys.maxsize] * V
    mst_set = [False] * V

    key[0] = 0  # Starting from the first vertex

    for _ in range(V - 1):
        u = min_key(key, mst_set)
        mst_set[u] = True

        for v in range(V):
            if graph[u][v] > 0 and not mst_set[v] and key[v] > graph[u][v]:
                key[v] = graph[u][v]
                parent[v] = u

    return parent

# Perform Prim's algorithm
parent = prim_mst()

# Print the edges in the MST along with their weights
print("Edge \tWeight")
for i in range(1, V):
    print(f"{parent[i]} - {i}\t{graph[i][parent[i]]}")