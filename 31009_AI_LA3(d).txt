#krushkals algorithm
# Define the graph as a list of edges
graph = [[0, 1, 1], [0, 2, 7], [1, 2, 5], [1, 3, 4], [ 3, 4 , 2] , [2,4,6] , [1,4,3]  ]
V = 5  # Number of vertices

# Function to find the parent of a node
def find(parent, i):
    if parent[i] == i:
        return i
    return find(parent, parent[i])

# Function to perform union of two sets
def union(parent, rank, x, y):
    x_root = find(parent, x)
    y_root = find(parent, y)

    if rank[x_root] < rank[y_root]:
        parent[x_root] = y_root
    elif rank[x_root] > rank[y_root]:
        parent[y_root] = x_root
    else:
        parent[y_root] = x_root
        rank[x_root] += 1

# Perform Kruskal's algorithm to find MST
result = []
i, e = 0, 0
graph = sorted(graph, key=lambda item: item[2])
parent = [i for i in range(V)]
rank = [0] * V

while e < V - 1:
    u, v, w = graph[i]
    i += 1
    x = find(parent, u)
    y = find(parent, v)

    if x != y:
        e += 1
        result.append([u, v, w])
        union(parent, rank, x, y)

# Print the edges in the MST
print("Edges in the MST:")
for u, v, weight in result:
    print(f"{u} -- {v} == {weight}")