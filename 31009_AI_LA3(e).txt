#djikstras

import sys

# Define the graph as an adjacency matrix
V = 7  # Number of vertices
graph = [
    [0, 2, 6, 0, 0, 0, 0],
    [2, 0, 0, 5, 0, 0, 0],
    [6, 0, 0, 8, 0, 0, 0],
    [0, 5, 8, 0, 10, 15, 0],
    [0, 0, 0, 10, 0, 0, 2],
    [0, 0, 0, 15, 0, 0, 6],
    [0, 0, 0, 0, 2, 6, 0]
]

# Function to find the vertex with minimum distance
def min_distance(dist, spt_set):
    min_val = sys.maxsize
    min_index = -1

    for v in range(V):
        if dist[v] < min_val and not spt_set[v]:
            min_val = dist[v]
            min_index = v

    return min_index

# Function to perform Dijkstra's algorithm to find shortest distances
def dijkstra(src):
    dist = [sys.maxsize] * V
    dist[src] = 0
    spt_set = [False] * V

    for _ in range(V):
        u = min_distance(dist, spt_set)
        spt_set[u] = True

        for v in range(V):
            if graph[u][v] > 0 and not spt_set[v] and dist[v] > dist[u] + graph[u][v]:
                dist[v] = dist[u] + graph[u][v]

    return dist

# Perform Dijkstra's algorithm
src = 0
distances = dijkstra(src)

# Print the shortest distances from the source vertex
print("Shortest distances from source vertex:")
for i, dist in enumerate(distances):
    print(f"Vertex {i}: {dist}")